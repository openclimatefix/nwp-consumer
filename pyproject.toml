# --- PROJECT CONFIGURATION --- #

[build-system]
requires = ["setuptools>=67", "wheel", "setuptools-git-versioning>=2.0,<3"]
build-backend = "setuptools.build_meta"

# Metadata (see https://peps.python.org/pep-0621/)
[project]
name = "nwp-consumer"
dynamic = ["version"] # Set automtically using git: https://setuptools-git-versioning.readthedocs.io/en/stable/
description = "Tool for aggregating raw NWP files into .zarr files"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.12,<3.13"
license = {text = "MIT License"}
authors = [
    { name = "Sol Cotton", email = "sol@openclimatefix.org"}
]
classifiers = ["Programming Language :: Python :: 3"]
dependencies = [
    "dask == 2024.8.1",
    "eccodes == 2.38.3",
    "ecmwf-api-client == 1.6.3",
    "cfgrib == 0.9.14.1",
    "dagster-pipes == 1.9.3",
    "joblib == 1.4.2",
    "numpy == 2.1.0",
    "ocf-blosc2 == 0.0.11",
    "psutil == 6.0.0",
    "returns == 0.24.0",
    "s3fs == 2024.9.0",
    "xarray == 2025.1.0",
    "zarr == 2.18.3"
]

[dependency-groups]
dev = [
    # Testing
    "botocore == 1.33.7",  # Required for moto, prevents installing the whole of boto3
    "flask == 3.0.0",
    "flask-cors == 4.0.0",
    "moto[s3,server] == 4.2.11",
    "unittest-xml-reporting == 3.2.0",
    "hypothesis == 6.115.3",
    # Linting
    "returns[compatible-mypy]",
    "ruff == 0.6.9",
    "pandas-stubs",
    "types-psutil",
    "types-pytz",
    "types-pyyaml",
    # Docs
    "pydoctor >= 24.3.0",
    "pdoc >= 15.0.0",
    # IDE support
    "python-lsp-server",
    "pylsp-mypy",
    "python-lsp-ruff",
]

[project.scripts]
nwp-consumer-cli = "nwp_consumer.cmd.main:run_cli"

[project.urls]
repository = "https://github.com/openclimatefix/nwp-consumer"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["test*"]

[tool.setuptools.package-data]
"*" = ["py.typed", "*.pyi"]

[tool.setuptools-git-versioning]
enabled = true

# --- LINTING AND TYPING CONFIGURATION --- #

[tool.basedpyright]
include = ["src"]
exclude = ["**/__pycache__"]
pythonVersion = "3.12"

# MyPy configuration
# * See https://mypy.readthedocs.io/en/stable/index.html
[tool.mypy]
python_version = "3.12"
strict = true
warn_unreachable = true
warn_return_any = true
disallow_untyped_defs = true
plugins = [
    "returns.contrib.mypy.returns_plugin",
    "numpy.typing.mypy_plugin",
]

[[tool.mypy.overrides]]
# Ignore missing imports for libraries that don't have them.
# If they are ever made, remove from here!
module = [
    "ecmwfapi",
    "cfgrib",
    "botocore.session",
    "botocore.client",
    "joblib",
    "ocf_blosc2",
    "s3fs",
    "zarr",
]
ignore_missing_imports = true

# Ruff configuration
# * See https://beta.ruff.rs/docs/
[tool.ruff]
line-length = 100
indent-width = 4
exclude = ["__init__.py"]

[tool.ruff.lint]
fixable = ["ALL"]
ignore = ["ANN101", "ANN102"]
select = [
    "F",   # pyflakes
    "E",   # pycodestyle
    "W",   # whitespace and newlines
    "I",   # isort
    "UP",  # modernize
    "ANN", # flake8 type annotations
    "S",   # flake8 bandit
    "B",   # flake8 bugbear
    "C4",  # flake8 comprehensions
    "COM", # flake8 commas
    "T20", # flake8 print
    "SIM", # flake8 simplify
    "ARG", # flake8 unused arguments
    "DTZ", # flake8 datetimes
    "Q",   # flake8 quotes
    "TCH", # flake8 typecheck
    "D",   # pydocstyle
    "RUF", # ruff-specific rules
]

[tool.ruff.lint.per-file-ignores]
"test*" = ["D", "ANN"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 100

# --- DOCUMENTATION CONFIGURATION --- #

[tool.pydoctor]
add-package = ["src/nwp_consumer"]
project-base-dir = "src/nwp_consumer"
docformat = "google"
html-output = "docs"
theme = "classic"
warnings-as-errors = true
privacy = [
    "HIDDEN:**.test_*",
]

